/**
 * SMARTy Pay Node SDK
 * @author Evgeny Dolganov <e.dolganov@smartypay.io>
 */

import {SignReqProps, SmartyPayAPI} from './index';


describe('SmartyPayAPI', ()=>{

  describe('utils', ()=>{

    const api = SmartyPayAPI.utils;

    const message = 'test data';
    const secret = 'test key';
    // generated by https://www.devglan.com/online-tools/hmac-sha256-online
    const signature = '4695788ca94015a246422be13bbd966ade571842efc3a39296bdb6f2377597ff';

    test('getMessageSignature', ()=>{
      expect(api.getMessageSignature(message, secret)).toBe(signature);
      expect(api.getMessageSignature(`NOT-${message}`, secret)).not.toBe(signature);
      expect(api.getMessageSignature(message, `NOT-${secret}`)).not.toBe(signature);
    });

    test('isValidSignature', () => {
      expect(api.isValidSignature(message, signature, secret)).toBe(true);
      expect(api.isValidSignature(`NOT-${message}`, signature, secret)).toBe(false);
      expect(api.isValidSignature(message, `NOT-${signature}`, secret)).toBe(false);
      expect(api.isValidSignature(message, signature, `NOT-${secret}`)).toBe(false);
    });
  });

  describe('subscriptions', ()=>{

    const signProps: SignReqProps = {
      host: 'https://ncps-api.staging.mnxsc.tech',
      publicKey: 's5FGH1xnRMs6WGPEFX9oIlxYDYEYX4Sg',
      secretKey: 'ltbUjBfqXqwJLf3hToVTTvHho5YRaR3SnL2Dh20x3P3f0A462gmMlUa4pfYq1ScM',
    };

    const api = new SmartyPayAPI(signProps).subscriptions;


    const payerAddress = '0x14186C8215985f33845722730c6382443Bf9EC65';

    test('getSubscriptionPlans', async () => {
      const plans = await api.getActivePlans();
      expect(plans).not.toBeUndefined();
      expect(plans.length).toBeGreaterThan(0);
    });

    test('getSubscriptionsByPayer', async ()=>{
      const subs = await api.getSubscriptionsByPayer(payerAddress);
      expect(subs).not.toBeUndefined();
      if(subs.length > 0){
        expect(subs[0].payer).toBe(payerAddress);
      }
    });

    test('createSubscription', async ()=>{
      try {

        const resp = await api.createSubscription({
          planId: 'BAD_PLAN_ID',
          payer: payerAddress,
          customerId: 'some',
          metadata: 'some',
        });

        console.log('unexpected resp', resp);
        throw new Error('exception expected');
      } catch (e){

        expect(e.body).not.toBeUndefined();
        expect(e.body.status).toBe(400);
        expect(e.body.code).toBe('BadRequest');
        expect(e.body.message).toBe('Invalid value for: body');
      }
    })
  })



})


